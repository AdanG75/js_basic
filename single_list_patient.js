/*
En este desaf칤o, tu objetivo es implementar una singly linked list para almacenar informaci칩n 
sobre pacientes de un hospital. Cada nodo de la lista representar치 a un paciente y tendr치 los 
siguientes campos:

    Nombre del paciente (string)
    Edad del paciente (number)
    N칰mero de cama asignada al paciente (number)

La lista deber치 tener los siguientes m칠todos:

    addPatient(name, age): agrega un nuevo paciente a la lista, asign치ndole la pr칩xima cama 
                           disponible. Si no hay camas disponibles, debe lanzar un error con 
                           el mensaje "No hay camas disponibles".

    removePatient(name): remueve al paciente con el nombre especificado de la lista y libera su 
                         cama. Si el paciente no se encuentra en la lista, debe lanzar un error 
                         con el mensaje "Paciente no encontrado".

    getPatient(name): retorna la informaci칩n del paciente con el nombre especificado en el 
                      siguiente formato { name, age, bedNumber }. Si el paciente no se encuentra 
                      en la lista, debe lanzar un error con el mensaje "Paciente no encontrado".

    getPatientList(): retorna una lista con la informaci칩n de todos los pacientes en la lista, 
                      cada paciente deber치 tener el siguiente formato { name, age, bedNumber }.

    getAvailableBeds(): retorna un n칰mero con el total de camas disponibles.

*/

class Node {
    constructor(name, age, bedNumber) {
      // Tu c칩digo aqu칤 游녣游낕
      this.name = name;
      this.age = age;
      this.bedNumber = bedNumber;
      this.nextPatient = null;
    }
}


class PatientList {
    constructor(beds = 1) {
      // Tu c칩digo aqu칤 游녣游낕
      this.beds = beds;
      this.head = null;
      this.tail = null;

      let availableBeds = []
      for (let i = 0; i < beds; i++) {
        availableBeds.push(true)
      }
      this.availableBeds = availableBeds;
    }

    getAvailableBed() {
        const bed = this.availableBeds.findIndex((element) => element === true);

        if (bed < -1) {
            throw new Error("No hay camas disponibles")
        }

        this.availableBeds[bed] = false;
        return bed + 1;
    }
  
    addPatient(name, age) {
      // Tu c칩digo aqu칤 游녣游낕
      if (this.beds < 1) {
        throw new Error("No hay camas disponibles")
      }

      const bed = this.getAvailableBed();
      const newPatient = new Node(name, age, bed)
      if (!this.head) {
        this.head = newPatient;
        this.tail = newPatient;
      } else {
        this.tail.nextPatient = newPatient;
        this.tail = newPatient;
      }

      return --this.beds;
    }
  
    removePatient(name) {
      // Tu c칩digo aqu칤 游녣游낕
      if (this.head.name === name) {
        // free the bed
        this.availableBeds[this.head.bedNumber - 1] = true;
        ++this.beds;
        // remove de patient
        this.head = this.head.nextPatient;

        return this.beds;
      } else {
        let actualPatient = this.head;

        while (actualPatient.nextPatient) {
            if (actualPatient.nextPatient.name === name) {
                // free the bed
                this.availableBeds[actualPatient.nextPatient.bedNumber - 1] = true;
                ++this.beds;
                // remove de patient
                actualPatient.nextPatient = actualPatient.nextPatient.nextPatient;

                if (!actualPatient.nextPatient) {
                    this.tail = actualPatient
                }

                return this.beds;
            } else {
                actualPatient = actualPatient.nextPatient;
            }
        }
      }

      throw new Error("Paciente no encontrado")
    }
  
    getPatient(name) {
      // Tu c칩digo aqu칤 游녣游낕
      let patient = null;

      if (this.head.name === name) {
        patient = this.head;
      } else if (this.tail.name === name) {
        patient = this.tail;
      } else {
        let actualPatient = this.head.nextPatient;

        while (actualPatient.nextPatient) {
            if (actualPatient.name === name) {
                patient = actualPatient;

                break;
            } else {
                actualPatient = actualPatient.nextPatient;
            }
        }
      }

      if (!patient) {
        throw new Error("Paciente no encontrado")
      } else {
        return {
            name: patient.name, 
            age: patient.age, 
            bedNumber: patient.bedNumber,
        }
      }
    }
  
    getPatientList() {
      // Tu c칩digo aqu칤 游녣游낕
      let listOfPatients = [];

      let actualPatient = this.head;
      while (actualPatient) {
        listOfPatients.push({
            name: actualPatient.name, 
            age: actualPatient.age, 
            bedNumber: actualPatient.bedNumber,
        })
        actualPatient = actualPatient.nextPatient;
      }

      return listOfPatients;
    }
  
    getAvailableBeds() {
      // Tu c칩digo aqu칤 游녣游낕
      return this.beds;
    }
}


const list = new PatientList(5)
list.addPatient("Paciente 1", 20)
list.addPatient("Paciente 2", 30)
list.addPatient("Paciente 3", 31)
list.addPatient("Paciente 4", 32)
list.addPatient("Paciente 5", 33)

list.removePatient("Paciente 5")
list.removePatient("Paciente 2")
list.addPatient("Paciente 6", 28)
list.removePatient("Paciente 1")
list.addPatient("Paciente 7", 25)

const patients = list.getPatientList()
console.log(patients)
console.log(list.getAvailableBeds())
console.log(list.head)
console.log(list.tail)

